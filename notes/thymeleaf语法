Thymeleaf的主要作用是把model中的数据渲染到html中，因此其语法主要是如何解析model中的数据。从以下方面来学习：

- 变量
- 方法
- 条件判断
- 循环
- 运算
  - 逻辑运算
  - 布尔运算
  - 比较运算
  - 条件运算
- 其它



- 静态页面中，th指令不被识别，但是浏览器也不会报错，把它当做一个普通属性处理。这样span的默认值请登录就会展现在页面
- 如果是在Thymeleaf环境下，th指令就会被识别和解析，而th:text的含义就是替换所在标签中的文本内容，于是user.name的值就替代了 span中默认的请登录

指令的设计，正是Thymeleaf的高明之处，也是它优于其它模板引擎的原因。动静结合的设计，使得无论是前端开发人员还是后端开发人员可以完美契合。

ognl表达式的语法糖

ognl提供了类似js的语法方式：

例如：${user.name} 可以写作${user['name']}   不推荐，更麻烦


ognl表达式中的方法调用

ognl表达式本身就支持方法调用，例如：

这里我们调用了name（是一个字符串）的split方法。


Thymeleaf内置对象

Thymeleaf中提供了一些内置对象，并且在这些对象中提供了一些方法，方便我们来调用。获取这些对象，需要使用#对象名来引用。

- 一些环境相关对象

        对象       	作用
       #ctx      	获取Thymeleaf自己的Context对象
     #requset    	如果是web程序，可以获取HttpServletRequest对象
     #response   	如果是web程序，可以获取HttpServletReponse对象
     #session    	如果是web程序，可以获取HttpSession对象
  #servletContext	如果是web程序，可以获取HttpServletContext对象


- Thymeleaf提供的全局对象：

      对象    	作用
    #dates  	处理java.util.date的工具对象
  #calendars	处理java.util.calendar的工具对象
   #numbers 	用来对数字格式化的方法
   #strings 	用来处理字符串的方法
    #bools  	用来判断布尔值的方法
   #arrays  	用来处理数组的方法
    #lists  	用来处理List集合的方法
    #sets   	用来处理set集合的方法
    #maps   	用来处理map集合的方法

-------------------------------------------------------------------------------
字面值

有的时候，我们需要在指令中填写基本类型如：字符串、数值、布尔等，并不希望被Thymeleaf解析为变量，这个时候称为字面值。
-------------------------------------------------------------------------------
- 字符串字面值
  使用一对'引用的内容就是字符串字面值了：
-------------------------------------------------------------------------------
 - 数字字面值

  数字不需要任何特殊语法， 写的什么就是什么，而且可以直接进行算术运算
-------------------------------------------------------------------------------
-布尔字面值

 布尔类型的字面值是true或false：

<div th:if="true">  
你填的是true
</div>

这里引用了一个th:if指令，跟vue中的v-if类似


-------------------------------------------------------------------------------
拼接

我们经常会用到普通字符串与表达式拼接的情况：
  <span th:text="'欢迎您:' + ${user.name} + '!'"></span>

字符串字面值需要用''，拼接起来非常麻烦，Thymeleaf对此进行了简化，使用一对|即可：
<span th:text="|欢迎您:${user.name}|"></span>

-------------------------------------------------------------------------------

运算

需要注意：${}内部的是通过OGNL表达式引擎解析的，外部的才是通过Thymeleaf的引擎解析，因此运算符尽量放在${}外进行。
-------------------------------------------------------------------------------
- 算术运算
  支持的算术运算符：+ - * / %

<span th:text="${user.age}"></span>
<span th:text="${user.age}%2 == 0"></span>

-------------------------------------------------------------------------------
- 比较运算
  支持的比较运算：>, <, >= and <=  ，但是>, <不能直接使用，因为xml会解析为标签，要使用别名。
  注意 == and !=不仅可以比较数值，类似于equals的功能。
  可以使用的别名：gt (>), lt (<), ge (>=), le (<=), not (!). Also eq (==), neq/ne (!=).
-------------------------------------------------------------------------------
- 条件运算
  - 三元运算

<span th:text="${user.sex} ? '男':'女'"></span>

三元运算符的三个部分：conditon ? then : else
condition：条件

then：条件成立的结果

else：不成立的结果

默认值

有的时候，我们取一个值可能为空，这个时候需要做非空判断，可以使用 表达式 ?: 默认值简写

 <span th:text="${user.name} ?: '二狗'"></span>

?:之间没有空格。
-------------------------------------------------------------------------------
循环

循环也是非常频繁使用的需求，我们使用th:each指令来完成：
假如有用户的集合：users在Context中。
 <tr th:each="user : ${users}">  
  <td th:text="${user.name}">Onions</td>
  <td th:text="${user.age}">2.41</td>
  </tr>

- ${users} 是要遍历的集合，可以是以下类型：
  - Iterable，实现了Iterable接口的类
  - Enumeration，枚举
  - Interator，迭代器
  - Map，遍历得到的是Map.Entry
  - Array，数组及其它一切符合数组结果的对象

在迭代的同时，我们也可以获取迭代的状态对象：
<tr th:each="user,stat : ${users}">
     <td th:text="${stat.index}">Onions</td>
    <td th:text="${user.name}">Onions</td>
    <td th:text="${user.age}">2.41</td>
</tr>
-------------------------------------------------------------------------------
stat对象包含以下属性：

- index，从0开始的角标
- count，元素的个数，从1开始
- size，总元素个数
- current，当前遍历到的元素
- even/odd，返回是否为奇偶，boolean值
- first/last，返回是否为第一或最后，boolean值
-------------------------------------------------------------------------------
 逻辑判断

有了if和else，我们能实现一切功能^_^。

Thymeleaf中使用th:if 或者 th:unless ，两者的意思恰好相反。

<span th:if="${user.age} < 24">小鲜肉</span>
 th:if如果为true,就会执行后面的语句
 th:unless 如果为true，就不会执行后面的语句

 以下情况被认定为true：

 - 表达式值为true
 - 表达式值为非0数值
 - 表达式值为非0字符
 - 表达式值为字符串，但不是"false","no","off"
 - 表达式不是布尔、字符串、数字、字符中的任何一种 其它情况包括null都被认定为false
-------------------------------------------------------------------------------
分支控制switch

这里要使用两个指令：th:switch 和 th:case
需要注意的是，一旦有一个th:case成立，其它的则不再判断。与java中的switch是一样的。

另外th:case="*"表示默认，放最后。

  <div th:switch="${user.role}">
  <p th:case="'admin'">用户是管理员</p>
  <p th:case="'manager'">用户是经理</p>
  <p th:case="*">用户是别的玩意</p>
  </div>
-------------------------------------------------------------------------------

JS模板

模板引擎不仅可以渲染html，也可以对JS中的进行预处理。而且为了在纯静态环境下可以运行，其Thymeleaf代码可以被注释起来：
<script th:inline="javascript">
    const user = /*[[${user}]]*/ {};
    const age = /*[[${user.age}]]*/ 20;
    console.log(user);
    console.log(age)
</script>

- 在script标签中通过th:inline="javascript"来声明这是要特殊处理的js脚本
- 语法结构：
const user = /*[[Thymeleaf表达式]]*/ "静态环境下的默认值";
因为Thymeleaf被注释起来，因此即便是静态环境下， js代码也不会报错，而是采用表达式后面跟着的默认值。


-------------------------------------------------------------------------------
var 和 let 第一点不同就是 let 是块作用域，即其在整个大括号 {} 之内可见。如果使用 let 来重写上面的 for 循环的话，会报错

var：只有全局作用域和函数作用域概念，没有块级作用域的概念。但是会把{}内也假称为块作用域。

let：只有块级作用域的概念 ，由 { } 包括起来，if语句和for语句里面的{ }也属于块级作用域。
 let 和 var 的第二点不同是，在变量声明之前就访问变量的话，会直接提示 ReferenceError，而不像 var 那样使用默认值 undefined:

    var 存在变量提升，而 let，const（后面会提及）声明的变量却不存在变量提升，所以用 let 定义的变量一定要在声明后再使用，否则会报错。

除了let以外，ES6还引入了cons，const 和 let 的作用域是一致的，不同的是 const 变量一旦被赋值，就不能再改变了，但是这并不意味着使用 const 声明的变量本身不可变，只是说它不可被再次赋值了，而且const 声明的变量必须经过初始化。
